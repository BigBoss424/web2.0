{"remainingRequest":"/home/otacon424/Documents/github/portfolio/v6/node_modules/thread-loader/dist/cjs.js??ref--2-1!/home/otacon424/Documents/github/portfolio/v6/node_modules/babel-loader/lib/index.js??ref--2-2!/home/otacon424/Documents/github/portfolio/v6/node_modules/eslint-loader/dist/cjs.js!/home/otacon424/Documents/github/portfolio/v6/.nuxt/utils.js","dependencies":[{"path":"/home/otacon424/Documents/github/portfolio/v6/.nuxt/utils.js","mtime":1586844562638},{"path":"/home/otacon424/Documents/github/portfolio/v6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/otacon424/Documents/github/portfolio/v6/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/otacon424/Documents/github/portfolio/v6/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/otacon424/Documents/github/portfolio/v6/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/otacon424/Documents/github/portfolio/v6/.nuxt/utils.js"],"names":["Vue","process","client","window","onNuxtReadyCbs","onNuxtReady","cb","push","empty","globalHandleError","error","config","errorHandler","interopDefault","promise","then","m","default","sanitizeComponent","Component","options","_Ctor","extend","extendOptions","name","__file","getMatchedComponents","route","matches","prop","Array","prototype","concat","apply","matched","map","index","Object","keys","key","getMatchedComponentsInstances","flatMapComponents","fn","components","reduce","promises","instances","resolveRouteComponents","Promise","all","instance","match","getRouteData","meta","setContext","app","context","isStatic","static","isDev","isHMR","payload","base","env","req","res","ssrContext","redirect","status","path","query","_redirected","pathType","router","resolve","fullPath","test","next","formatUrl","server","location","replace","Error","beforeNuxtRender","beforeRenderFns","nuxtState","__NUXT__","from","currentRouteData","fromRouteData","_errored","Boolean","params","promisify","getLocation","mode","decodeURI","pathname","hash","indexOf","slice","length","search","compile","str","tokensToFunction","parse","getQueryDiff","toQuery","fromQuery","diff","queries","k","String","normalizeError","err","message","JSON","stringify","e","constructor","statusCode","response","PATH_REGEXP","RegExp","join","tokens","defaultDelimiter","delimiter","exec","escaped","offset","prefix","capture","group","modifier","asterisk","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","encodeURIComponentPretty","slashAllowed","re","encodeURI","c","charCodeAt","toString","toUpperCase","encodeAsterisk","i","flags","obj","opts","data","encode","pretty","encodeURIComponent","token","value","segment","TypeError","isArray","j","sensitive","url","protocol","substring","startsWith","parts","split","result","shift","filter","formatQuery","sort","val","val2","addLifecycleHook","vm","hook","$options"],"mappings":"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","sourcesContent":["import Vue from 'vue'\n\n// window.{{globals.loadedCallback}} hook\n// Useful for jsdom testing or plugins (https://github.com/tmpvar/jsdom#dealing-with-asynchronous-script-loading)\nif (process.client) {\n  window.onNuxtReadyCbs = []\n  window.onNuxtReady = (cb) => {\n    window.onNuxtReadyCbs.push(cb)\n  }\n}\n\nexport function empty () {}\n\nexport function globalHandleError (error) {\n  if (Vue.config.errorHandler) {\n    Vue.config.errorHandler(error)\n  }\n}\n\nexport function interopDefault (promise) {\n  return promise.then(m => m.default || m)\n}\n\nexport function sanitizeComponent (Component) {\n  // If Component already sanitized\n  if (Component.options && Component._Ctor === Component) {\n    return Component\n  }\n  if (!Component.options) {\n    Component = Vue.extend(Component) // fix issue #6\n    Component._Ctor = Component\n  } else {\n    Component._Ctor = Component\n    Component.extendOptions = Component.options\n  }\n  // For debugging purpose\n  if (!Component.options.name && Component.options.__file) {\n    Component.options.name = Component.options.__file\n  }\n  return Component\n}\n\nexport function getMatchedComponents (route, matches = false, prop = 'components') {\n  return Array.prototype.concat.apply([], route.matched.map((m, index) => {\n    return Object.keys(m[prop]).map((key) => {\n      matches && matches.push(index)\n      return m[prop][key]\n    })\n  }))\n}\n\nexport function getMatchedComponentsInstances (route, matches = false) {\n  return getMatchedComponents(route, matches, 'instances')\n}\n\nexport function flatMapComponents (route, fn) {\n  return Array.prototype.concat.apply([], route.matched.map((m, index) => {\n    return Object.keys(m.components).reduce((promises, key) => {\n      if (m.components[key]) {\n        promises.push(fn(m.components[key], m.instances[key], m, key, index))\n      } else {\n        delete m.components[key]\n      }\n      return promises\n    }, [])\n  }))\n}\n\nexport function resolveRouteComponents (route, fn) {\n  return Promise.all(\n    flatMapComponents(route, async (Component, instance, match, key) => {\n      // If component is a function, resolve it\n      if (typeof Component === 'function' && !Component.options) {\n        Component = await Component()\n      }\n      match.components[key] = Component = sanitizeComponent(Component)\n      return typeof fn === 'function' ? fn(Component, instance, match, key) : Component\n    })\n  )\n}\n\nexport async function getRouteData (route) {\n  if (!route) {\n    return\n  }\n  // Make sure the components are resolved (code-splitting)\n  await resolveRouteComponents(route)\n  // Send back a copy of route with meta based on Component definition\n  return {\n    ...route,\n    meta: getMatchedComponents(route).map((Component, index) => {\n      return { ...Component.options.meta, ...(route.matched[index] || {}).meta }\n    })\n  }\n}\n\nexport async function setContext (app, context) {\n  // If context not defined, create it\n  if (!app.context) {\n    app.context = {\n      isStatic: process.static,\n      isDev: true,\n      isHMR: false,\n      app,\n\n      payload: context.payload,\n      error: context.error,\n      base: '/',\n      env: {\"baseUrl\":\"https://www.lichter.io\",\"stripePublicKey\":\"pk_test_9hUFtiNMcseCbvLBySY7D8P6\"}\n    }\n    // Only set once\n    if (context.req) {\n      app.context.req = context.req\n    }\n    if (context.res) {\n      app.context.res = context.res\n    }\n    if (context.ssrContext) {\n      app.context.ssrContext = context.ssrContext\n    }\n    app.context.redirect = (status, path, query) => {\n      if (!status) {\n        return\n      }\n      app.context._redirected = true\n      // if only 1 or 2 arguments: redirect('/') or redirect('/', { foo: 'bar' })\n      let pathType = typeof path\n      if (typeof status !== 'number' && (pathType === 'undefined' || pathType === 'object')) {\n        query = path || {}\n        path = status\n        pathType = typeof path\n        status = 302\n      }\n      if (pathType === 'object') {\n        path = app.router.resolve(path).route.fullPath\n      }\n      // \"/absolute/route\", \"./relative/route\" or \"../relative/route\"\n      if (/(^[.]{1,2}\\/)|(^\\/(?!\\/))/.test(path)) {\n        app.context.next({\n          path,\n          query,\n          status\n        })\n      } else {\n        path = formatUrl(path, query)\n        if (process.server) {\n          app.context.next({\n            path,\n            status\n          })\n        }\n        if (process.client) {\n          // https://developer.mozilla.org/en-US/docs/Web/API/Location/replace\n          window.location.replace(path)\n\n          // Throw a redirect error\n          throw new Error('ERR_REDIRECT')\n        }\n      }\n    }\n    if (process.server) {\n      app.context.beforeNuxtRender = fn => context.beforeRenderFns.push(fn)\n    }\n    if (process.client) {\n      app.context.nuxtState = window.__NUXT__\n    }\n  }\n\n  // Dynamic keys\n  const [currentRouteData, fromRouteData] = await Promise.all([\n    getRouteData(context.route),\n    getRouteData(context.from)\n  ])\n\n  if (context.route) {\n    app.context.route = currentRouteData\n  }\n\n  if (context.from) {\n    app.context.from = fromRouteData\n  }\n\n  app.context.next = context.next\n  app.context._redirected = false\n  app.context._errored = false\n  app.context.isHMR = Boolean(context.isHMR)\n  app.context.params = app.context.route.params || {}\n  app.context.query = app.context.route.query || {}\n}\n\nexport function promisify (fn, context) {\n  const promise = fn(context)\n\n  if (promise && promise instanceof Promise && typeof promise.then === 'function') {\n    return promise\n  }\n  return Promise.resolve(promise)\n}\n\n// Imported from vue-router\nexport function getLocation (base, mode) {\n  let path = decodeURI(window.location.pathname)\n  if (mode === 'hash') {\n    return window.location.hash.replace(/^#\\//, '')\n  }\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length)\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n// Imported from path-to-regexp\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nexport function compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\nexport function getQueryDiff (toQuery, fromQuery) {\n  const diff = {}\n  const queries = { ...toQuery, ...fromQuery }\n  for (const k in queries) {\n    if (String(toQuery[k]) !== String(fromQuery[k])) {\n      diff[k] = true\n    }\n  }\n  return diff\n}\n\nexport function normalizeError (err) {\n  let message\n  if (!(err.message || typeof err === 'string')) {\n    try {\n      message = JSON.stringify(err, null, 2)\n    } catch (e) {\n      message = `[${err.constructor.name}]`\n    }\n  } else {\n    message = err.message || err\n  }\n  return {\n    ...err,\n    message,\n    statusCode: (err.statusCode || err.status || (err.response && err.response.status) || 500)\n  }\n}\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nconst PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  const tokens = []\n  let key = 0\n  let index = 0\n  let path = ''\n  const defaultDelimiter = (options && options.delimiter) || '/'\n  let res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    const m = res[0]\n    const escaped = res[1]\n    const offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    const next = str[index]\n    const prefix = res[2]\n    const name = res[3]\n    const capture = res[4]\n    const group = res[5]\n    const modifier = res[6]\n    const asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    const partial = prefix != null && next != null && next !== prefix\n    const repeat = modifier === '+' || modifier === '*'\n    const optional = modifier === '?' || modifier === '*'\n    const delimiter = res[2] || defaultDelimiter\n    const pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter,\n      optional,\n      repeat,\n      partial,\n      asterisk: Boolean(asterisk),\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str, slashAllowed) {\n  const re = slashAllowed ? /[?#]/g : /[/?#]/g\n  return encodeURI(str).replace(re, (c) => {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURIComponentPretty(str, true)\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  const matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (let i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    let path = ''\n    const data = obj || {}\n    const options = opts || {}\n    const encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      const value = data[token.name || 'pathMatch']\n      let segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Format given url, append query to url query string\n *\n * @param  {string} url\n * @param  {string} query\n * @return {string}\n */\nfunction formatUrl (url, query) {\n  let protocol\n  const index = url.indexOf('://')\n  if (index !== -1) {\n    protocol = url.substring(0, index)\n    url = url.substring(index + 3)\n  } else if (url.startsWith('//')) {\n    url = url.substring(2)\n  }\n\n  let parts = url.split('/')\n  let result = (protocol ? protocol + '://' : '//') + parts.shift()\n\n  let path = parts.filter(Boolean).join('/')\n  let hash\n  parts = path.split('#')\n  if (parts.length === 2) {\n    [path, hash] = parts\n  }\n\n  result += path ? '/' + path : ''\n\n  if (query && JSON.stringify(query) !== '{}') {\n    result += (url.split('?').length === 2 ? '&' : '?') + formatQuery(query)\n  }\n  result += hash ? '#' + hash : ''\n\n  return result\n}\n\n/**\n * Transform data object to query string\n *\n * @param  {object} query\n * @return {string}\n */\nfunction formatQuery (query) {\n  return Object.keys(query).sort().map((key) => {\n    const val = query[key]\n    if (val == null) {\n      return ''\n    }\n    if (Array.isArray(val)) {\n      return val.slice().map(val2 => [key, '=', val2].join('')).join('&')\n    }\n    return key + '=' + val\n  }).filter(Boolean).join('&')\n}\n\nexport function addLifecycleHook(vm, hook, fn) {\n  if (!vm.$options[hook]) {\n    vm.$options[hook] = []\n  }\n  vm.$options[hook].push(fn)\n}\n"]}]}