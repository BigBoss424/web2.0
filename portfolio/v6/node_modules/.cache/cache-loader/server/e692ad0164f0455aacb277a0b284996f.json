{"remainingRequest":"/home/otacon424/Documents/github/portfolio/v6/node_modules/thread-loader/dist/cjs.js??ref--2-1!/home/otacon424/Documents/github/portfolio/v6/node_modules/babel-loader/lib/index.js??ref--2-2!/home/otacon424/Documents/github/portfolio/v6/compositions/useInterval.js","dependencies":[{"path":"/home/otacon424/Documents/github/portfolio/v6/compositions/useInterval.js","mtime":1585717879667},{"path":"/home/otacon424/Documents/github/portfolio/v6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/otacon424/Documents/github/portfolio/v6/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/otacon424/Documents/github/portfolio/v6/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgb25Nb3VudGVkLCBvblVubW91bnRlZCB9IGZyb20gJ0B2dWUvY29tcG9zaXRpb24tYXBpJzsKZXhwb3J0IGNvbnN0IHVzZUludGVydmFsID0gKGludGVydmFsSW5TZWNvbmRzLCBpbnRlcnZhbEFjdGlvbikgPT4gewogIGxldCBpbnRlcnZhbExpc3RlbmVyID0gbnVsbDsKICBvbk1vdW50ZWQoKCkgPT4gewogICAgaW50ZXJ2YWxMaXN0ZW5lciA9IHNldEludGVydmFsKGludGVydmFsQWN0aW9uLCBpbnRlcnZhbEluU2Vjb25kcyAqIDEwMDApOwogIH0pOwogIG9uVW5tb3VudGVkKCgpID0+IHsKICAgIGlmICghaW50ZXJ2YWxMaXN0ZW5lcikgewogICAgICByZXR1cm47CiAgICB9CgogICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbExpc3RlbmVyKTsKICB9KTsKfTs="},{"version":3,"sources":["/home/otacon424/Documents/github/portfolio/v6/compositions/useInterval.js"],"names":["onMounted","onUnmounted","useInterval","intervalInSeconds","intervalAction","intervalListener","setInterval","clearInterval"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,sBAAvC;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,iBAAD,EAAoBC,cAApB,KAAuC;AAChE,MAAIC,gBAAgB,GAAG,IAAvB;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,gBAAgB,GAAGC,WAAW,CAACF,cAAD,EAAiBD,iBAAiB,GAAG,IAArC,CAA9B;AACD,GAFQ,CAAT;AAIAF,EAAAA,WAAW,CAAC,MAAM;AAChB,QAAI,CAACI,gBAAL,EAAuB;AACrB;AACD;;AAEDE,IAAAA,aAAa,CAACF,gBAAD,CAAb;AACD,GANU,CAAX;AAOD,CAdM","sourcesContent":["import { onMounted, onUnmounted } from '@vue/composition-api'\n\nexport const useInterval = (intervalInSeconds, intervalAction) => {\n  let intervalListener = null\n\n  onMounted(() => {\n    intervalListener = setInterval(intervalAction, intervalInSeconds * 1000)\n  })\n\n  onUnmounted(() => {\n    if (!intervalListener) {\n      return\n    }\n\n    clearInterval(intervalListener)\n  })\n}\n"]}]}